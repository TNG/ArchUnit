plugins {
    id 'java-library'
}

abstract class ArchUnitTestExtension {
    boolean providesTestJar = false
}

ext.archUnitTest = extensions.create('archUnitTest', ArchUnitTestExtension)

dependencies {
    testImplementation libs.junitJupiter

    testRuntimeOnly libs.junitVintageEngine
    testRuntimeOnly libs.junitPlatformLauncher
    testRuntimeOnly libs.log4j.slf4j
}

tasks.withType(Test) {
    maxHeapSize = "2G"

    useJUnitPlatform {
        if (!project.hasProperty('allTests')) {
            excludeTags('com.tngtech.archunit.Slow')
        }
    }

    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

afterEvaluate {
    if (archUnitTest.providesTestJar) {
        configurations {
            tests.extendsFrom testRuntime
        }

        task testJar(type: Jar) {
            archiveClassifier = 'tests'
            from sourceSets.test.output
        }

        artifacts {
            tests testJar
        }
    }
}

// Add some better test failure reporting on the console

TestFailureReport testReport = new TestFailureReport(project: name)
tasks.withType(Test) {
    afterTest { TestDescriptor descriptor, TestResult result ->
        if (result.resultType == TestResult.ResultType.FAILURE) {
            testReport.addFailure(new TestFailure(descriptor, result.exception))
        }
    }
}

gradle.buildFinished {
    testReport.printFailures()
}

class TestFailureReport {
    String project
    private Map<String, TestClassFailureReport> reports = [:].withDefault { testClassName -> new TestClassFailureReport(className: testClassName) }

    void addFailure(TestFailure testFailure) {
        reports[testFailure.className].testFailures << testFailure
    }

    void printFailures() {
        def failureReports = reports.values().findAll { !it.testFailures.empty }
        if (failureReports.empty) {
            return
        }

        String redX = "\033[1;31m\u2718 \033[0m"
        String heading = "Failed tests for ${project}"
        int headingBoxWidth = heading.length() + 4
        println """
        ${'-' * headingBoxWidth}
        | ${heading} |
        ${'-' * headingBoxWidth}
        """.stripIndent()
        failureReports.each { TestClassFailureReport failureReport ->
            println "- ${failureReport.className} --> ${failureReport.location}"
            failureReport.testFailures.each { TestFailure failure ->
                println "  ${redX}.${failure.testDescription} --> ${failure.location}"
            }
        }
        println "${'-' * headingBoxWidth}"
    }
}

class TestClassFailureReport {
    String className
    List<TestFailure> testFailures = []

    String getLocation() {
        return "(${className.replaceAll(/.*\./, '')}.java:0)"
    }
}

class TestFailure {
    String className
    String testDescription
    String location = 'Unknown'

    TestFailure(TestDescriptor descriptor, Throwable failure) {
        className = descriptor.className
        testDescription = descriptor.displayName
        failure?.stackTrace?.find { it.className == className }?.each {
            location = "(${it.fileName}:${it.lineNumber})"
        }
    }
}
