ext.moduleName = 'com.tngtech.archunit.junit'

configurations {
    api
    compile.extendsFrom api
    testCompile.extendsFrom api
}

sourceSets {
    api {
        java {
            srcDirs = ['src/api/java']
        }
        compileClasspath = configurations.api
    }
}

spotbugs {
    sourceSets += [project.sourceSets.api]
}

dependencies {
    compileOnly sourceSets.api.output
    testCompile sourceSets.api.output
}

task apiJar(type: Jar) {
    archiveName = jar.archiveName.replace(project.name, "${project.name}-api")
    from sourceSets.api.output
}
build.dependsOn apiJar

artifacts {
    api apiJar
}

dependencies {
    api project(path: ':archunit', configuration: 'shadow')
    compile project(path: ':archunit', configuration: 'shadow')
    compile dependency.guava
    compile dependency.slf4j

    testCompile dependency.log4j_api
    testCompile dependency.log4j_core
    testCompile dependency.log4j_slf4j
    testCompile dependency.mockito
    testCompile dependency.assertj
    testCompile(dependency.assertj_guava) {
        exclude module: 'assertj-core'
        exclude module: 'guava'
    }
    testCompile project(path: ':archunit', configuration: 'tests')
}

addTestJarTo this

shadowJar {
    exclude 'META-INF/**'

    dependencies {
        exclude(project(':archunit'))
        exclude(dependency(dependency.slf4j))
    }
}

def addCleanThirdPartyTask = {
    // These files are already relocated into archunit.jar, so they're transitively available
    tasks.create(name: 'removeDuplicateThirdParty', type: Jar, dependsOn: shadowJar) {
        exclude "${thirdPartyRelocationPackage.replace('.', '/')}/**"

        File tempPath = tempJar(jar.archivePath)
        from zipTree(shadowJar.archivePath)
        archiveName tempPath.name

        doLast {
            assert shadowJar.archivePath.delete()
            assert tempPath.renameTo(shadowJar.archivePath)
        }
    }
    finishArchive.dependsOn removeDuplicateThirdParty
}
ext.configureJUnitArchive = { configureDependencies ->
    return {
        delegate.with addCleanThirdPartyTask
        compileJava.dependsOn project(':archunit-junit').finishArchive

        install.repositories.mavenInstaller.pom.whenConfigured configureDependencies
        uploadArchives.repositories.mavenDeployer.pom.whenConfigured configureDependencies
    }
}

this.with addCleanThirdPartyTask

javadoc.enabled = false
uploadArchives.enabled = false