import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'archunit.java-production-conventions'
    id 'org.ajoberstar.grgit' version '5.0.0'
    id "de.undercouch.download" version "5.0.2"
}

repositories {
    flatDir {
        dirs "${rootDir}/inlineDeps/"
    }
}

ext.moduleName = 'com.tngtech.archunit.tooling'
ext.minimumJavaVersion = JavaVersion.VERSION_1_9

sourceSets {
    testFixtures {
        java {
            compileClasspath += main.compileClasspath
            runtimeClasspath += main.runtimeClasspath
        }
    }
    main {
        java {
            compileClasspath += project.sourceSets.testFixtures.output
            runtimeClasspath += project.sourceSets.testFixtures.output
        }
    }
    test {
        java {
            compileClasspath += project.sourceSets.testFixtures.output
            runtimeClasspath += project.sourceSets.testFixtures.output
        }
    }
}

copy {
    into new File(project.sourceSets.testFixtures.output.resourcesDir, '@sources')
    from(project.sourceSets.testFixtures.java) {
        include '**/*.java'
    }
}

processTestFixturesResources {
    filesMatching(['**/pom.xml', '**/build.gradle']) {
        filter ReplaceTokens, tokens: [
                "junitDependency.version": project.property("archunit.version")
        ]
    }
}

dependencies {
    implementation dependency.junit5JupiterEngine
    implementation dependency.junit5VintageEngine
    implementation dependency.junitPlatform
    implementation dependency.guava
    implementation 'org.junit.platform:junit-platform-launcher:1.8.2'
    implementation project(path: ':archunit-junit5-engine')
    implementation 'com.github.stefanbirkner:system-lambda:1.2.1'
    implementation 'org.apache.maven.shared:maven-invoker:3.1.0'
    implementation 'org.apache.maven.surefire:surefire-report-parser:3.0.0-M5'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'org.gradle:gradle-tooling-api:7.3-20210825160000+0000'

    compileOnly 'com.github.spotbugs:spotbugs-annotations:4.5.3'

    testFixturesImplementation dependency.junitPlatform
    testFixturesImplementation dependency.junit5JupiterEngine
    testFixturesImplementation dependency.junit5JupiterApi
    testFixturesImplementation project(path: ':archunit')
    testFixturesImplementation project(path: ':archunit-junit5-engine-api')
    testFixturesImplementation project(path: ':archunit-junit5-api')
    testFixturesImplementation project(path: ':archunit-junit5-engine')
    testFixturesImplementation project(path: ':archunit-junit4')

    testImplementation dependency.assertj
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testImplementation 'org.junit-pioneer:junit-pioneer:1.6.1'
}

String getMavenRepoPath(Project project) {
    def pubs = project.publishing.publications.findAll() as Set<MavenPublication>
    def pub = pubs[0]
    if (!pub){
        return null
    }
    String groupPath = pub.groupId.replace('.', '/')
    return "$groupPath/$pub.artifactId"
}

def resolveAgainstMavenLocal(String path) {
    new File(new File(repositories.mavenLocal().url), path)
}

def deleteSafely(File file) {
    if (file.exists()) {
        println "Deleting ${file.toURI().toString()}"
        delete file
    } else {
        println "Could not find ${file.toURI().toString()}"
    }
}

task removeFromMavenLocal {
    group = 'other'
    description = 'Remove artifact and all versions/classifiers/flavors from local maven repository.'
    doLast {
        [project(':archunit-junit5-engine-api'),
         project(':archunit-junit5-engine'),
         project(':archunit-junit5-api'),
         project(':archunit-junit5'),
         project(':archunit-junit4'),
         project(':archunit')].each { project ->
            File file = resolveAgainstMavenLocal(getMavenRepoPath(project))
            deleteSafely file
        }

        ['org/apache/maven/surefire', 'org/apache/maven/plugins/maven-surefire-plugin'].each { path ->
            File file = resolveAgainstMavenLocal(path)
            deleteSafely file
        }
    }
}

task publishJUnitDepsToMavenLocal {
    group = 'other'
    description = 'Publishes ArchUnit JUnit artifacts to local Maven repo'
    dependsOn ':archunit-junit5-engine-api:publishMavenJavaPublicationToMavenLocal'
    dependsOn ':archunit-junit5-engine:publishMavenJavaPublicationToMavenLocal'
    dependsOn ':archunit-junit5-api:publishMavenJavaPublicationToMavenLocal'
    dependsOn ':archunit-junit5:publishMavenJavaPublicationToMavenLocal'
    dependsOn ':archunit-junit4:publishMavenJavaPublicationToMavenLocal'
    dependsOn ':archunit:publishMavenJavaPublicationToMavenLocal'
}

task chekoutCustomSurefireVersion {
    group = 'other'
    description = 'Checks out a custom version of Maven Surefire'
    onlyIf { task ->
        !(new File("${buildDir}/custom-github-deps/maven-surefire/pom.xml")).exists()
    }
    doLast {
        grgit.clone(
                dir: "${buildDir}/custom-github-deps/maven-surefire",
                uri: 'https://github.com/crizzis/maven-surefire.git',
                refToCheckout: 'maven-version')
        copy {
            into "${buildDir}/custom-github-deps/maven-surefire"
            from(new File(project.sourceSets.testFixtures.resources.srcDirs[0], "project")) {
                include '.mvn/wrapper/**'
                include 'mvnw'
            }
        }
    }
}

task publishCustomSurefireVersionToMavenLocal(type: Exec) {
    group = 'other'
    dependsOn chekoutCustomSurefireVersion
    onlyIf { task ->
        !resolveAgainstMavenLocal('org/apache/maven/surefire/surefire/3.0.0-custom').exists()
    }
    workingDir "${buildDir}/custom-github-deps/maven-surefire"
    commandLine "./mvnw", "install", "-DskipTests"
}

task downloadCustomGradleVersion(type: Download) {
    onlyIf { task ->
        !(new File(project.sourceSets.main.output.resourcesDir, 'gradle-7.5-bin.zip').exists())
    }
    src 'https://filesend.io/8PdZ/gradle-7.5-bin.zip?download_token=6b1236a8b17cefff61063a4d4822f5b3c540a3a0c0d815eb6edcf799c83b11a1'
    dest new File(project.sourceSets.main.output.resourcesDir, 'gradle-7.5-bin.zip')
}

gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(publishJUnitDepsToMavenLocal)) {
        def externalTests = graph.allTasks.findAll { task -> task.name.toLowerCase().endsWith("test") && !task.path.startsWith(":archunit-tooling-test:") }
        externalTests.each { externalTest -> externalTest.enabled = false }
    }
}

clean {
    dependsOn removeFromMavenLocal
}

test {
    dependsOn publishJUnitDepsToMavenLocal, publishCustomSurefireVersionToMavenLocal, downloadCustomGradleVersion
    useJUnitPlatform()
}
