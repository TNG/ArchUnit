import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import proguard.gradle.ProGuardTask

import java.nio.file.Files

import static java.nio.charset.StandardCharsets.UTF_8

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:5.3.3'
    }
}

plugins {
    id 'com.gradle.build-scan' version '1.8'
    id 'com.github.johnrengelman.shadow' version '2.0.0'
}

def thirdPartyRelocationPackage = 'com.tngtech.archunit.thirdparty'
def appAndSourceUrl = 'https://github.com/TNG/ArchUnit'

ext {
    year = "${Calendar.getInstance().get(Calendar.YEAR)}"
    app = [
            name   : 'ArchUnit',
            urls   : [
                    entry : appAndSourceUrl,
                    doc   : appAndSourceUrl,
                    issues: "${appAndSourceUrl}/issues",
                    source: appAndSourceUrl
            ],
            gitRepo: 'git@github.com:TNG/ArchUnit.git',
            license: [
                    name: 'The Apache Software License, Version 2.0',
                    url : 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            ]
    ]
    company = [
            name: 'TNG Technology Consulting GmbH',
            url : 'https://www.tngtech.com/'
    ]
    asmRelocationPackage = "${thirdPartyRelocationPackage}.org.objectweb.asm"
    guavaRelocationPackage = "${thirdPartyRelocationPackage}.com.google"

    dependency = [
            asm               : 'org.ow2.asm:asm:5.2',
            guava             : 'com.google.guava:guava:19.0',
            slf4j             : 'org.slf4j:slf4j-api:1.7.7',
            log4j_api         : 'org.apache.logging.log4j:log4j-api:2.1',
            log4j_core        : 'org.apache.logging.log4j:log4j-core:2.1',
            log4j_slf4j       : 'org.apache.logging.log4j:log4j-slf4j-impl:2.1',

            junit             : 'junit:junit:4.12',
            hamcrest          : 'org.hamcrest:hamcrest-core:1.3',
            junit_dataprovider: 'com.tngtech.java:junit-dataprovider:1.10.0',
            mockito           : 'org.mockito:mockito-core:1.10.19',
            assertj           : 'org.assertj:assertj-core:2.4.1',
            assertj_guava     : 'org.assertj:assertj-guava:2.0.0'
    ]

    postfixedJar = { File jarFile, String postfix ->
        new File(jarFile.parentFile, jarFile.name.replaceAll(/\.jar$/, "-${postfix}.jar"))
    }

    tempJar = { File jarFile -> postfixedJar(jarFile, 'tmp') }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.0.1'
}

allprojects {
    group = 'com.tngtech.archunit'
    version = '0.5.0-SNAPSHOT'

    repositories {
        mavenCentral()
    }
}

description = 'A Java architecture test library, to specify and assert architecture rules in plain Java'

def productionProjectNames = ['archunit', 'archunit-junit']
ext.productionProjects = subprojects.findAll { productionProjectNames.contains(it.name) }


subprojects {
    apply plugin: 'java'

    ext.repackagesAsm = false
    def addModuleDescription = { "${it} - Module '${project.name}'" }
    description addModuleDescription(rootProject.description)

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    tasks.withType(Jar) {
        manifest {
            attributes(
                    'Built-By': "Gradle ${gradle.gradleVersion}",
                    'Built-Date': new Date().format('yyyy-MM-dd'),
                    'Specification-Title': addModuleDescription(app.name),
                    'Specification-Version': version,
                    'Specification-Vendor': company.name,
                    'Implementation-Title': "com.tngtech.${project.name.replace('-', '.')}",
                    'Implementation-Version': version,
                    'Implementation-Vendor': company.name,
                    'Issue-Tracker': app.urls.issues,
                    'Documentation-URL': app.urls.doc,
                    'Copyright': "${year} ${company.name}",
                    'License': app.license.name
            )
        }
    }
    test {
        testLogging {
            events "failed"
            exceptionFormat "full"
        }
    }
}

ext.shadowConfig = { classifierName ->
    return {
        classifier = classifierName

        exclude 'org/apache/**'
        exclude 'Log4j*'
        exclude 'META-INF/**'

        relocate 'org.objectweb.asm', asmRelocationPackage
        relocate 'com.google', guavaRelocationPackage
    }
}

def configureShadow = {
    shadowJar shadowConfig('shadow')
}

def configureProGuard = {
    configurations {
        proguard
    }

    dependencies {
        proguard 'com.google.code.findbugs:jsr305:3.0.1'
    }

    task shrinkDependencies(type: ProGuardTask, dependsOn: shadowJar) {
        delegate.ext.archivePath = postfixedJar(jar.archivePath, 'proguard')

        injars shadowJar.archivePath
        outjars archivePath

        libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
        libraryjars configurations.compile
        libraryjars configurations.proguard

        dontoptimize
        dontobfuscate
        dontwarn '**.com.google.j2objc.annotations.**'
        dontwarn 'org.codehaus.**'
        dontwarn 'org.slf4j.impl.**'

        keep "class !${guavaRelocationPackage}.** {*;}"

        file("$rootProject.projectDir/proguard-keepclassmembers.txt").eachLine(UTF_8.name()) {
            keepclassmembers "class ${thirdPartyRelocationPackage}.**${it}** {*;}"
        }
    }
    assemble.dependsOn(shrinkDependencies)

    task finishArchive {
        doLast {
            assert jar.archivePath.delete()
            Files.copy(shrinkDependencies.archivePath.toPath(), jar.archivePath.toPath())
        }
        mustRunAfter jar
    }
    build.dependsOn(finishArchive)
}

productionProjects*.with {
    apply plugin: 'com.github.johnrengelman.shadow'

    delegate.with configureShadow
    delegate.with configureProGuard

    task testJar(type: ShadowJar) {
        from sourceSets.test.output
        configurations = [configurations.tests]
    }
    testJar shadowConfig('tests')

    configurations {
        tests
    }

    artifacts {
        tests testJar
    }

    test {
        if (!project.hasProperty('allTests')) {
            useJUnit {
                excludeCategories 'com.tngtech.archunit.Slow'
            }
        }
    }
}

apply from: 'build-utils/build-utils.gradle'
